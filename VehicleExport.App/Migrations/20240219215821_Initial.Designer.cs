// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VehicleExport.App.DAL;

#nullable disable

namespace VehicleExport.App.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240219215821_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("IdentityUserRole<long>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.Accounts.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9770d744-5c62-4d76-a4ef-163f94b33dad"),
                            ConcurrencyStamp = "39c1c8d2-1d7c-4855-b55b-e1bedf8e9752",
                            Name = "SuperAdmin",
                            NormalizedName = "SuperAdmin"
                        },
                        new
                        {
                            Id = new Guid("558669b9-49a9-4520-90b8-51ba5b12c33e"),
                            ConcurrencyStamp = "fc6b0990-b6d8-4854-acd5-6f10b145bb15",
                            Name = "ProjectManager",
                            NormalizedName = "ProjectManager"
                        },
                        new
                        {
                            Id = new Guid("b67f4c23-5886-41ee-bbbb-6ae377f8f2ad"),
                            ConcurrencyStamp = "3710e9ee-8092-419c-b96a-bb26459f6b66",
                            Name = "ProjectViewer",
                            NormalizedName = "ProjectViewer"
                        },
                        new
                        {
                            Id = new Guid("18b6e930-29db-4c03-88e9-840adf59f2f7"),
                            ConcurrencyStamp = "b4a74363-ff91-4294-bddf-697075f9235b",
                            Name = "ContentManager",
                            NormalizedName = "ContentManager"
                        });
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.Accounts.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ca5d3245-3675-48b9-95db-44556b19a105",
                            Email = "admin@test.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@TEST.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAELOrEpUQ4JA4TBunJ2/6EUL0CgieO/1ovPUme4vSG/v8egNG8XhlK6MryaTe49Ue6Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.Accounts.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be"),
                            RoleId = new Guid("9770d744-5c62-4d76-a4ef-163f94b33dad"),
                            Id = new Guid("df949305-241c-4735-af88-d289e1d9b25f")
                        },
                        new
                        {
                            UserId = new Guid("c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be"),
                            RoleId = new Guid("558669b9-49a9-4520-90b8-51ba5b12c33e"),
                            Id = new Guid("d547fb9e-7ab4-4f2f-8242-994869184467")
                        },
                        new
                        {
                            UserId = new Guid("c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be"),
                            RoleId = new Guid("b67f4c23-5886-41ee-bbbb-6ae377f8f2ad"),
                            Id = new Guid("bd3473b1-e37c-4183-863a-3df6589b9c7a")
                        },
                        new
                        {
                            UserId = new Guid("c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be"),
                            RoleId = new Guid("18b6e930-29db-4c03-88e9-840adf59f2f7"),
                            Id = new Guid("73fdaf3a-512c-4ddb-b707-28d3bcf7912f")
                        });
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.Accounts.ExternalCredential", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ConcurrencyTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Provider")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("ExternalCredentials");
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.Content.ContentBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AllowedTokens")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ConcurrencyTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPage")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("Slug")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Slug");

                    b.ToTable("ContentBlocks", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));

                    b.HasData(
                        new
                        {
                            Id = new Guid("47ae11c0-d4bc-41f5-8af1-c2fd4da33179"),
                            AllowedTokens = "[{\"Token\":\"passwordResetUrl\",\"Description\":\"The URL for the user to reset their password\"}]",
                            Description = "The text that appears in a password reset message",
                            IsPage = false,
                            Slug = "password-reset-email",
                            Title = "Reset Your Password",
                            Value = "To reset your account, follow this link: %passwordResetUrl%"
                        },
                        new
                        {
                            Id = new Guid("2d825918-5a1b-426e-a020-9370cc65becf"),
                            Description = "The text that appears on the About page",
                            IsPage = true,
                            Slug = "about",
                            Title = "About Us",
                            Value = "About us..."
                        },
                        new
                        {
                            Id = new Guid("4d74b33d-dbdb-436c-981a-af7d94f5ebeb"),
                            Description = "",
                            IsPage = true,
                            Slug = "placeholder",
                            Title = "Placeholder",
                            Value = "This is a placeholder page. The underlying functionality has not yet been implemented."
                        },
                        new
                        {
                            Id = new Guid("c7ea41f4-96a0-4128-912e-a3ab45bf6585"),
                            Description = "Content that appears on the Home/Dashboard page",
                            IsPage = false,
                            Slug = "dashboard",
                            Title = "Hello",
                            Value = "Hello, world. Or whoever else is here. This content is editable within the app."
                        },
                        new
                        {
                            Id = new Guid("28c664fe-4212-4515-b858-e6af29e9c543"),
                            Description = "The help page that appears in the top nav",
                            IsPage = true,
                            Slug = "help",
                            Title = "Help!",
                            Value = "Need help? Don't we all."
                        });
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.Dealers", b =>
                {
                    b.Property<int>("DealerId")
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DealerId"), 1L, 1);

                    b.Property<string>("DealerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DealerId");

                    b.ToView("Dealers");
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.Destinations.Destination", b =>
                {
                    b.Property<int>("DestinationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DestinationId"), 1L, 1);

                    b.Property<byte[]>("ConcurrencyTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<short>("EncryptionTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("FtpHost")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FtpPassword")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FtpRemoteDir")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FtpUsername")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IncludeHeaders")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("OneFilePerDealer")
                        .HasColumnType("bit");

                    b.Property<string>("OutputFileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("OutputFormatTypeId")
                        .HasColumnType("smallint");

                    b.Property<short>("ProtocolTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("SSHKeyFileName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("SendPhotosInZip")
                        .HasColumnType("bit");

                    b.Property<string>("SshFilePassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SshKeyFileChecksum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("TransferModeTypeId")
                        .HasColumnType("smallint");

                    b.Property<bool>("UseQuotedFields")
                        .HasColumnType("bit");

                    b.Property<bool>("ZipOutputFile")
                        .HasColumnType("bit");

                    b.Property<DateTime>("dtmCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dtmLastChanged")
                        .HasColumnType("datetime2");

                    b.HasKey("DestinationId");

                    b.HasIndex("EncryptionTypeId");

                    b.HasIndex("OutputFormatTypeId");

                    b.HasIndex("ProtocolTypeId");

                    b.HasIndex("TransferModeTypeId");

                    b.ToTable("Destinations", (string)null);

                    b.HasData(
                        new
                        {
                            DestinationId = 1,
                            EncryptionTypeId = (short)1,
                            FtpHost = "vendor.windowstickers.biz",
                            FtpPassword = "somepassword",
                            FtpRemoteDir = "/",
                            FtpUsername = "someuser",
                            IncludeHeaders = true,
                            Name = "Test Destination 1",
                            OneFilePerDealer = false,
                            OutputFileName = "Vehicledata.txt",
                            OutputFormatTypeId = (short)2,
                            ProtocolTypeId = (short)1,
                            SendPhotosInZip = false,
                            TransferModeTypeId = (short)1,
                            UseQuotedFields = true,
                            ZipOutputFile = false,
                            dtmCreated = new DateTime(2024, 2, 19, 15, 58, 20, 669, DateTimeKind.Local).AddTicks(6467),
                            dtmLastChanged = new DateTime(2024, 2, 19, 15, 58, 20, 669, DateTimeKind.Local).AddTicks(6497)
                        });
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.ExportDealerParameters.ExportDealerParameter", b =>
                {
                    b.Property<int>("ExportDealerParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExportDealerParameterId"), 1L, 1);

                    b.Property<byte[]>("ConcurrencyTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("ExportDealerId")
                        .HasColumnType("int");

                    b.Property<int>("LayoutFieldId")
                        .HasColumnType("int");

                    b.Property<string>("ParameterValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dtmCreated")
                        .HasColumnType("datetime2");

                    b.HasKey("ExportDealerParameterId");

                    b.HasIndex("ExportDealerId");

                    b.HasIndex("LayoutFieldId");

                    b.ToTable("ExportDealerParameters", (string)null);
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.ExportDealers.ExportDealer", b =>
                {
                    b.Property<int>("ExportDealerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExportDealerId"), 1L, 1);

                    b.Property<byte[]>("ConcurrencyTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("DealerId")
                        .HasColumnType("int");

                    b.Property<int>("ExportId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dtmCreated")
                        .HasColumnType("datetime2");

                    b.HasKey("ExportDealerId");

                    b.HasIndex("ExportId");

                    b.HasIndex("ExportId", "DealerId");

                    b.ToTable("ExportDealers", (string)null);
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.Exports.Export", b =>
                {
                    b.Property<int>("ExportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExportId"), 1L, 1);

                    b.Property<byte[]>("ConcurrencyTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("DestinationId")
                        .HasColumnType("int");

                    b.Property<int>("LayoutId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<TimeSpan?>("RunTimeOne")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("RunTimeTwo")
                        .HasColumnType("time");

                    b.Property<DateTime>("dtmCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dtmLastChanged")
                        .HasColumnType("datetime2");

                    b.HasKey("ExportId");

                    b.HasIndex("DestinationId");

                    b.HasIndex("LayoutId");

                    b.ToTable("Exports", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));

                    b.HasData(
                        new
                        {
                            ExportId = 1,
                            DestinationId = 1,
                            LayoutId = 1,
                            Name = "Sample Export 1",
                            RunTimeOne = new TimeSpan(0, 0, 0, 0, 0),
                            dtmCreated = new DateTime(2024, 2, 19, 15, 58, 20, 669, DateTimeKind.Local).AddTicks(6527),
                            dtmLastChanged = new DateTime(2024, 2, 19, 15, 58, 20, 669, DateTimeKind.Local).AddTicks(6529)
                        });
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.Exports.ExportTracking", b =>
                {
                    b.Property<int>("ExportTrackingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExportTrackingId"), 1L, 1);

                    b.Property<byte[]>("ConcurrencyTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("ExportDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExportId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleCount")
                        .HasColumnType("int");

                    b.HasKey("ExportTrackingId");

                    b.HasIndex("ExportId");

                    b.ToTable("ExportTracking", (string)null);
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.Exports.ExportTrackingDealer", b =>
                {
                    b.Property<int>("ExportTrackingDealerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExportTrackingDealerId"), 1L, 1);

                    b.Property<byte[]>("ConcurrencyTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("DealerId")
                        .HasColumnType("int");

                    b.Property<int>("ExportTrackingId")
                        .HasColumnType("int");

                    b.Property<short>("PhotoCount")
                        .HasColumnType("smallint");

                    b.Property<int>("VehicleCount")
                        .HasColumnType("int");

                    b.HasKey("ExportTrackingDealerId");

                    b.HasIndex("ExportTrackingId", "DealerId");

                    b.ToTable("ExportTrackingDealer", (string)null);
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.Jobs.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Ended")
                        .HasColumnType("datetime2");

                    b.Property<long>("ExpectedCount")
                        .HasColumnType("bigint");

                    b.Property<long>("FailureCount")
                        .HasColumnType("bigint");

                    b.Property<string>("ItemType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("SerializedItemIds")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ItemIds");

                    b.Property<DateTime?>("Started")
                        .HasColumnType("datetime2");

                    b.Property<long>("SuccessCount")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Created");

                    b.ToTable("Jobs", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.Jobs.JobItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("JobItems", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.LayoutFields.LayoutField", b =>
                {
                    b.Property<int>("LayoutFieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LayoutFieldId"), 1L, 1);

                    b.Property<byte[]>("ConcurrencyTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("DatabaseFieldLabel")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("DatabaseFieldSqlText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("LayoutFieldTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Parameter")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("dtmCreated")
                        .HasColumnType("datetime2");

                    b.HasKey("LayoutFieldId");

                    b.HasIndex("LayoutFieldTypeId");

                    b.ToTable("LayoutFields", (string)null);
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.LayoutFieldsMap.LayoutFieldMap", b =>
                {
                    b.Property<int>("LayoutFieldsMapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LayoutFieldsMapId"), 1L, 1);

                    b.Property<byte[]>("ConcurrencyTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<short>("FieldOrder")
                        .HasColumnType("smallint");

                    b.Property<string>("HeaderLabel")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("LayoutFieldId")
                        .HasColumnType("int");

                    b.Property<int>("LayoutId")
                        .HasColumnType("int");

                    b.HasKey("LayoutFieldsMapId");

                    b.HasIndex("LayoutFieldId");

                    b.HasIndex("LayoutId");

                    b.ToTable("LayoutFieldsMap", (string)null);
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.Layouts.Layout", b =>
                {
                    b.Property<int>("LayoutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LayoutId"), 1L, 1);

                    b.Property<bool?>("CertifiedOnly")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ConcurrencyTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<short>("LayoutDataSourceTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("MakesList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("NewVehicles")
                        .HasColumnType("bit");

                    b.Property<string>("ProductsList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoredProcedureName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("UsedVehicles")
                        .HasColumnType("bit");

                    b.Property<string>("WarrantiesList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dtmCreated")
                        .HasColumnType("datetime2");

                    b.HasKey("LayoutId");

                    b.HasIndex("LayoutDataSourceTypeId");

                    b.ToTable("Layouts", (string)null);

                    b.HasData(
                        new
                        {
                            LayoutId = 1,
                            LayoutDataSourceTypeId = (short)1,
                            Name = "Sample Layout 1",
                            dtmCreated = new DateTime(2024, 2, 19, 15, 58, 20, 669, DateTimeKind.Local).AddTicks(6511)
                        });
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.MinorEntity.EncryptionType", b =>
                {
                    b.Property<short>("EncryptionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("EncryptionTypeId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EncryptionTypeId");

                    b.ToTable("EncryptionType", (string)null);

                    b.HasData(
                        new
                        {
                            EncryptionTypeId = (short)1,
                            Description = "Explicit FTP over TLS"
                        },
                        new
                        {
                            EncryptionTypeId = (short)2,
                            Description = "Plain FTP"
                        });
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.MinorEntity.LayoutDataSourceType", b =>
                {
                    b.Property<short>("LayoutDataSourceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("LayoutDataSourceTypeId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LayoutDataSourceTypeId");

                    b.ToTable("LayoutDataSourceType", (string)null);

                    b.HasData(
                        new
                        {
                            LayoutDataSourceTypeId = (short)1,
                            Description = "Layout Fields"
                        },
                        new
                        {
                            LayoutDataSourceTypeId = (short)2,
                            Description = "Stored Procedure"
                        });
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.MinorEntity.LayoutFieldType", b =>
                {
                    b.Property<short>("LayoutFieldTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("LayoutFieldTypeId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LayoutFieldTypeId");

                    b.ToTable("LayoutFieldType", (string)null);

                    b.HasData(
                        new
                        {
                            LayoutFieldTypeId = (short)1,
                            Description = "Database Field"
                        },
                        new
                        {
                            LayoutFieldTypeId = (short)2,
                            Description = "Parameter"
                        });
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.MinorEntity.OutputFormatType", b =>
                {
                    b.Property<short>("OutputFormatTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("OutputFormatTypeId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OutputFormatTypeId");

                    b.ToTable("OutputFormatType", (string)null);

                    b.HasData(
                        new
                        {
                            OutputFormatTypeId = (short)1,
                            Description = "Comma-Separated (CSV)"
                        },
                        new
                        {
                            OutputFormatTypeId = (short)2,
                            Description = "Tab-Delimited (TAB)"
                        },
                        new
                        {
                            OutputFormatTypeId = (short)3,
                            Description = "Pipe-Delimited"
                        });
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.MinorEntity.ProtocolType", b =>
                {
                    b.Property<short>("ProtocolTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("ProtocolTypeId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProtocolTypeId");

                    b.ToTable("ProtocolType", (string)null);

                    b.HasData(
                        new
                        {
                            ProtocolTypeId = (short)1,
                            Description = "Plain FTP"
                        },
                        new
                        {
                            ProtocolTypeId = (short)2,
                            Description = "FTP+SSH"
                        });
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.MinorEntity.TransferModeType", b =>
                {
                    b.Property<short>("TransferModeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("TransferModeTypeId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransferModeTypeId");

                    b.ToTable("TransferModeType", (string)null);

                    b.HasData(
                        new
                        {
                            TransferModeTypeId = (short)1,
                            Description = "Active"
                        },
                        new
                        {
                            TransferModeTypeId = (short)2,
                            Description = "Passive"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("VehicleExport.App.Models.Data.Accounts.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("VehicleExport.App.Models.Data.Accounts.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("VehicleExport.App.Models.Data.Accounts.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("VehicleExport.App.Models.Data.Accounts.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.Accounts.ApplicationUserRole", b =>
                {
                    b.HasOne("VehicleExport.App.Models.Data.Accounts.ApplicationRole", "ApplicationRole")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VehicleExport.App.Models.Data.Accounts.ApplicationUser", "ApplicationUser")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationRole");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.Accounts.ExternalCredential", b =>
                {
                    b.HasOne("VehicleExport.App.Models.Data.Accounts.ApplicationUser", "ApplicationUser")
                        .WithMany("ExternalCredentials")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.Destinations.Destination", b =>
                {
                    b.HasOne("VehicleExport.App.Models.Data.MinorEntity.EncryptionType", "EncryptionType")
                        .WithMany("Destinations")
                        .HasForeignKey("EncryptionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VehicleExport.App.Models.Data.MinorEntity.OutputFormatType", "OutputFormatType")
                        .WithMany("Destinations")
                        .HasForeignKey("OutputFormatTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VehicleExport.App.Models.Data.MinorEntity.ProtocolType", "ProtocolType")
                        .WithMany("Destinations")
                        .HasForeignKey("ProtocolTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VehicleExport.App.Models.Data.MinorEntity.TransferModeType", "TransferModeType")
                        .WithMany("Destinations")
                        .HasForeignKey("TransferModeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EncryptionType");

                    b.Navigation("OutputFormatType");

                    b.Navigation("ProtocolType");

                    b.Navigation("TransferModeType");
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.ExportDealerParameters.ExportDealerParameter", b =>
                {
                    b.HasOne("VehicleExport.App.Models.Data.ExportDealers.ExportDealer", "ExportDealer")
                        .WithMany("ExportDealerParameters")
                        .HasForeignKey("ExportDealerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VehicleExport.App.Models.Data.LayoutFields.LayoutField", "LayoutField")
                        .WithMany("ExportDealerParameters")
                        .HasForeignKey("LayoutFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExportDealer");

                    b.Navigation("LayoutField");
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.ExportDealers.ExportDealer", b =>
                {
                    b.HasOne("VehicleExport.App.Models.Data.Exports.Export", "Export")
                        .WithMany("ExportDealer")
                        .HasForeignKey("ExportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Export");
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.Exports.Export", b =>
                {
                    b.HasOne("VehicleExport.App.Models.Data.Destinations.Destination", "Destination")
                        .WithMany("Exports")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VehicleExport.App.Models.Data.Layouts.Layout", "Layout")
                        .WithMany("Exports")
                        .HasForeignKey("LayoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");

                    b.Navigation("Layout");
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.Exports.ExportTracking", b =>
                {
                    b.HasOne("VehicleExport.App.Models.Data.Exports.Export", null)
                        .WithMany("ExportTracking")
                        .HasForeignKey("ExportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.Exports.ExportTrackingDealer", b =>
                {
                    b.HasOne("VehicleExport.App.Models.Data.Exports.ExportTracking", null)
                        .WithMany("ExportTrackingDealer")
                        .HasForeignKey("ExportTrackingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.Jobs.JobItem", b =>
                {
                    b.HasOne("VehicleExport.App.Models.Data.Jobs.Job", "Job")
                        .WithMany("JobItems")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.LayoutFields.LayoutField", b =>
                {
                    b.HasOne("VehicleExport.App.Models.Data.MinorEntity.LayoutFieldType", "LayoutFieldType")
                        .WithMany("LayoutFields")
                        .HasForeignKey("LayoutFieldTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LayoutFieldType");
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.LayoutFieldsMap.LayoutFieldMap", b =>
                {
                    b.HasOne("VehicleExport.App.Models.Data.LayoutFields.LayoutField", "LayoutField")
                        .WithMany("LayoutFieldMappings")
                        .HasForeignKey("LayoutFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VehicleExport.App.Models.Data.Layouts.Layout", "Layout")
                        .WithMany("LayoutFieldMappings")
                        .HasForeignKey("LayoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Layout");

                    b.Navigation("LayoutField");
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.Layouts.Layout", b =>
                {
                    b.HasOne("VehicleExport.App.Models.Data.MinorEntity.LayoutDataSourceType", "LayoutDataSourceType")
                        .WithMany("Layouts")
                        .HasForeignKey("LayoutDataSourceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LayoutDataSourceType");
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.Accounts.ApplicationRole", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.Accounts.ApplicationUser", b =>
                {
                    b.Navigation("ExternalCredentials");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.Destinations.Destination", b =>
                {
                    b.Navigation("Exports");
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.ExportDealers.ExportDealer", b =>
                {
                    b.Navigation("ExportDealerParameters");
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.Exports.Export", b =>
                {
                    b.Navigation("ExportDealer");

                    b.Navigation("ExportTracking");
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.Exports.ExportTracking", b =>
                {
                    b.Navigation("ExportTrackingDealer");
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.Jobs.Job", b =>
                {
                    b.Navigation("JobItems");
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.LayoutFields.LayoutField", b =>
                {
                    b.Navigation("ExportDealerParameters");

                    b.Navigation("LayoutFieldMappings");
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.Layouts.Layout", b =>
                {
                    b.Navigation("Exports");

                    b.Navigation("LayoutFieldMappings");
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.MinorEntity.EncryptionType", b =>
                {
                    b.Navigation("Destinations");
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.MinorEntity.LayoutDataSourceType", b =>
                {
                    b.Navigation("Layouts");
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.MinorEntity.LayoutFieldType", b =>
                {
                    b.Navigation("LayoutFields");
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.MinorEntity.OutputFormatType", b =>
                {
                    b.Navigation("Destinations");
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.MinorEntity.ProtocolType", b =>
                {
                    b.Navigation("Destinations");
                });

            modelBuilder.Entity("VehicleExport.App.Models.Data.MinorEntity.TransferModeType", b =>
                {
                    b.Navigation("Destinations");
                });
#pragma warning restore 612, 618
        }
    }
}
